{"version":3,"file":"static/js/2109.b187b6c8.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/token-6764aefb.browser.esm.js"],"sourcesContent":["import { constants, BigNumber } from 'ethers';\nimport { dD as NFT_BASE_CONTRACT_ROLES, cs as ContractWrapper, bk as AbiSchema, cb as TokenErc20ContractSchema, aM as resolveAddress, H as getRoleHash } from './index-42be4209.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-8e6a03fc.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, a as ContractEvents, G as GasCostEstimator } from './contract-appuri-9892f94f.browser.esm.js';\nimport { a as fetchCurrencyValue, C as ContractEncoder } from './fetchCurrencyValue-d99a82ef.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-c14063bd.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-93079777.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-41b5f9c8.browser.esm.js';\nimport { a as Erc20SignatureMintable } from './erc-20-db6129dc.browser.esm.js';\nimport { S as StandardErc20 } from './erc-20-standard-f89fb4c3.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\nimport './assertEnabled-f866961a.browser.esm.js';\nimport './drop-claim-conditions-6b858f0b.browser.esm.js';\nimport 'fast-deep-equal';\nimport './signature-89bf7caf.browser.esm.js';\nimport './normalizePriceValue-c906d886.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './setErc20Allowance-96f7a033.browser.esm.js';\nimport 'uuid';\n\n/**\n * Manages history for Token contracts\n * @public\n */\nclass TokenERC20History {\n  constructor(contractWrapper, events) {\n    this.contractWrapper = contractWrapper;\n    this.events = events;\n  }\n\n  /**\n   * Get all holder balances\n   *\n   * @remarks Lets you get all token holders and their corresponding balances\n   * @returns  A JSON object of all token holders and their corresponding balances\n   * @example\n   * ```javascript\n   * const allHolderBalances = await contract.history.getAllHolderBalances();\n   * ```\n   */\n  async getAllHolderBalances() {\n    const a = await this.events.getEvents(\"Transfer\");\n    const txns = a.map(b => b.data);\n    const balances = {};\n    txns.forEach(item => {\n      const from = item?.from;\n      const to = item?.to;\n      const amount = item?.value;\n      if (!(from === constants.AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === constants.AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    const entries = Object.entries(balances);\n    const results = await Promise.all(entries.map(_ref => {\n      let [, value] = _ref;\n      return fetchCurrencyValue(this.contractWrapper.getProvider(), this.contractWrapper.address, value);\n    }));\n    return entries.map((_ref2, index) => {\n      let [addr] = _ref2;\n      return {\n        holder: addr,\n        balance: results[index]\n      };\n    });\n  }\n}\n\n/**\n * Create a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"token\");\n * ```\n *\n * @internal\n * @deprecated use contract.erc20 instead\n */\nclass Token extends StandardErc20 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * Signature Minting\n   * @remarks Generate tokens that can be minted only with your own signature, attaching your own set of mint conditions.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the tokens\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc20ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Token.contractRoles);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new TokenERC20History(this.contractWrapper, this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc20SignatureMintable(this.contractWrapper, this.roles);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns The amount of voting power in tokens\n   */\n  async getVoteBalance() {\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\n  }\n  async getVoteBalanceOf(account) {\n    return await this.erc20.getValue(await this.contractWrapper.read(\"getVotes\", [account]));\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns The address of your vote delegatee\n   */\n  async getDelegation() {\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns The address of your vote delegatee\n   */\n  async getDelegationOf(account) {\n    return await this.contractWrapper.read(\"delegates\", [await resolveAddress(account)]);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint Tokens for the connected wallet\n   *\n   * @remarks See {@link Token.mintTo}\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async amount => {\n    return this.erc20.mint.prepare(amount);\n  });\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   *\n   * await contract.mintTo(toAddress, amount);\n   * ```\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return this.erc20.mintTo.prepare(to, amount);\n  });\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param amount - The amount of tokens you want to mint\n   *\n   * @deprecated Use `contract.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, amount) {\n    return this.erc20.getMintTransaction(to, amount);\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.mintBatchTo(data);\n   * ```\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async args => {\n    return this.erc20.mintBatchTo.prepare(args);\n  });\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  delegateTo = /* @__PURE__ */buildTransactionFunction(async delegateeAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"delegate\",\n      args: [await resolveAddress(delegateeAddress)]\n    });\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnTokens(amount);\n   * ```\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(amount => {\n    return this.erc20.burn.prepare(amount);\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  burnFrom = /* @__PURE__ */buildTransactionFunction(async (holder, amount) => {\n    return this.erc20.burnFrom.prepare(holder, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Token };\n"],"names":["TokenERC20History","contractWrapper","events","_classCallCheck","this","_createClass","key","value","_getAllHolderBalances","_asyncToGenerator","_regeneratorRuntime","mark","_callee","a","txns","balances","entries","results","_this","wrap","_context","prev","next","getEvents","sent","map","b","data","forEach","item","from","to","amount","constants","BigNumber","sub","add","Object","Promise","all","_ref","_slicedToArray","fetchCurrencyValue","getProvider","address","abrupt","_ref2","index","holder","balance","stop","apply","arguments","Token","_StandardErc","_inherits","_super","_createSuper","network","storage","_this2","options","length","undefined","abi","chainId","ContractWrapper","call","_defineProperty","_assertThisInitialized","buildTransactionFunction","_ref5","_callee2","_context2","erc20","mint","prepare","_x","_ref6","_callee3","_context3","mintTo","_x2","_x3","_ref7","_callee4","args","_context4","mintBatchTo","_x4","_ref8","_callee5","delegateeAddress","_context5","t0","Transaction","t1","resolveAddress","t2","t3","t4","method","fromContractWrapper","_x5","burn","_ref9","_callee6","_context6","burnFrom","_x6","_x7","AbiSchema","parse","metadata","ContractMetadata","TokenErc20ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","sales","ContractPrimarySale","ContractEvents","history","encoder","ContractEncoder","estimator","GasCostEstimator","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","signature","Erc20SignatureMintable","_getVoteBalance","_callee7","_context7","getSignerAddress","getVoteBalanceOf","_getVoteBalanceOf","_callee8","account","_context8","read","getValue","_x8","_getDelegation","_callee9","_context9","getDelegationOf","_getDelegationOf","_callee10","_context10","_x9","_isTransferRestricted","_callee11","anyoneCanTransfer","_context11","getRoleHash","_getMintTransaction","_callee12","_context12","getMintTransaction","_x10","_x11","_prepare","_callee13","overrides","_context13","_x12","_x13","_x14","_call","_callee14","functionName","_context14","_x15","_x16","_x17","StandardErc20","NFT_BASE_CONTRACT_ROLES"],"sourceRoot":""}