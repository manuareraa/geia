{"version":3,"file":"static/js/6131.50bc28e3.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from '../../../../dist/defineProperty-d7c057bf.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError, C as ChainNotConfiguredError, A as AddChainError, S as SwitchChainError } from '../../../../dist/errors-9f6736cb.browser.esm.js';\nimport { a as assertWindowEthereum } from '../../../../dist/assertWindowEthereum-88295886.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nfunction getInjectedName(ethereum) {\n  if (!ethereum) {\n    return \"Injected\";\n  }\n  const getName = provider => {\n    if (provider.isAvalanche) {\n      return \"Core Wallet\";\n    }\n    if (provider.isBitKeep) {\n      return \"BitKeep\";\n    }\n    if (provider.isBraveWallet) {\n      return \"Brave Wallet\";\n    }\n    if (provider.isCoinbaseWallet) {\n      return \"Coinbase Wallet\";\n    }\n    if (provider.isExodus) {\n      return \"Exodus\";\n    }\n    if (provider.isFrame) {\n      return \"Frame\";\n    }\n    if (provider.isKuCoinWallet) {\n      return \"KuCoin Wallet\";\n    }\n    if (provider.isMathWallet) {\n      return \"MathWallet\";\n    }\n    if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) {\n      return \"1inch Wallet\";\n    }\n    if (provider.isOpera) {\n      return \"Opera\";\n    }\n    if (provider.isPortal) {\n      return \"Ripio Portal\";\n    }\n    if (provider.isTally) {\n      return \"Tally\";\n    }\n    if (provider.isTokenPocket) {\n      return \"TokenPocket\";\n    }\n    if (provider.isTokenary) {\n      return \"Tokenary\";\n    }\n    if (provider.isTrust || provider.isTrustWallet) {\n      return \"Trust Wallet\";\n    }\n    if (provider.isMetaMask) {\n      return \"MetaMask\";\n    }\n  };\n\n  // Some injected providers detect multiple other providers and create a list at `ethers.providers`\n  if (ethereum.providers?.length) {\n    // Deduplicate names using Set\n    // Coinbase Wallet puts multiple providers in `ethereum.providers`\n    const nameSet = new Set();\n    let unknownCount = 1;\n    for (const provider of ethereum.providers) {\n      let name = getName(provider);\n      if (!name) {\n        name = `Unknown Wallet #${unknownCount}`;\n        unknownCount += 1;\n      }\n      nameSet.add(name);\n    }\n    const names = [...nameSet];\n    if (names.length) {\n      return names;\n    }\n    return names[0] ?? \"Injected\";\n  }\n  return getName(ethereum) ?? \"Injected\";\n}\n\nclass InjectedConnector extends WagmiConnector {\n  constructor(arg) {\n    const defaultOptions = {\n      shimDisconnect: true,\n      getProvider: () => {\n        if (assertWindowEthereum(globalThis.window)) {\n          return globalThis.window.ethereum;\n        }\n      }\n    };\n    const options = {\n      ...defaultOptions,\n      ...arg.options\n    };\n    super({\n      chains: arg.chains,\n      options\n    });\n    /**\n     * Name of the injected connector\n     */\n    /**\n     * Whether the connector is ready to be used\n     *\n     * `true` if the injected provider is found\n     */\n    _defineProperty(this, \"shimDisconnectKey\", \"injected.shimDisconnect\");\n    /**\n     * handles the `accountsChanged` event from the provider\n     * * emits `change` event if connected to a different account\n     * * emits `disconnect` event if no accounts available\n     */\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    /**\n     * handles the `chainChanged` event from the provider\n     * * emits `change` event if connected to a different chain\n     */\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    /**\n     * handles the `disconnect` event from the provider\n     * * emits `disconnect` event\n     */\n    _defineProperty(this, \"onDisconnect\", async error => {\n      // We need this as MetaMask can emit the \"disconnect\" event upon switching chains.\n      // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\n      // https://github.com/MetaMask/providers/pull/120\n      if (error.code === 1013) {\n        const provider = await this.getProvider();\n        if (provider) {\n          try {\n            const isAuthorized = await this.getAccount();\n            if (isAuthorized) {\n              return;\n            }\n          } catch {\n            // If we can't get the account anymore, continue with disconnect\n          }\n        }\n      }\n      this.emit(\"disconnect\");\n\n      // Remove `shimDisconnect` => it signals that wallet is disconnected\n      if (this.options.shimDisconnect) {\n        await this.connectorStorage.removeItem(this.shimDisconnectKey);\n      }\n    });\n    const _provider = options.getProvider();\n\n    // set the name of the connector\n    if (typeof options.name === \"string\") {\n      // if name is given, use that\n      this.name = options.name;\n    } else if (_provider) {\n      // if injected provider is detected, get name from it\n      const detectedName = getInjectedName(_provider);\n      if (options.name) {\n        this.name = options.name(detectedName);\n      } else {\n        if (typeof detectedName === \"string\") {\n          this.name = detectedName;\n        } else {\n          this.name = detectedName[0];\n        }\n      }\n    } else {\n      // else default to \"Injected\"\n      this.name = \"Injected\";\n    }\n    this.id = \"injected\";\n    this.ready = !!_provider;\n    this.connectorStorage = arg.connectorStorage;\n  }\n\n  /**\n   * * Connect to the injected provider\n   * * switch to the given chain if `chainId` is specified as an argument\n   */\n  async connect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      this.setupListeners();\n\n      // emit \"connecting\" event\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n\n      // request account addresses from injected provider\n      const accountAddresses = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      // get the first account address\n      const firstAccountAddress = utils.getAddress(accountAddresses[0]);\n\n      // Switch to given chain if a chainId is specified\n      let connectedChainId = await this.getChainId();\n      // Check if currently connected chain is unsupported\n      // chainId is considered unsupported if chainId is not in the list of this.chains array\n      let isUnsupported = this.isChainUnsupported(connectedChainId);\n\n      // if chainId is specified and it is not the same as the currently connected chain\n      if (options.chainId && connectedChainId !== options.chainId) {\n        // switch to the given chain\n        try {\n          await this.switchChain(options.chainId);\n          // recalculate connectedChainId and isUnsupported\n          connectedChainId = options.chainId;\n          isUnsupported = this.isChainUnsupported(options.chainId);\n        } catch (e) {\n          console.error(`Could not switch to chain id: ${options.chainId}`, e);\n        }\n      }\n\n      // if shimDisconnect is enabled\n      if (this.options.shimDisconnect) {\n        // add the shim shimDisconnectKey => it signals that wallet is connected\n        await this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\n      }\n      const connectionInfo = {\n        account: firstAccountAddress,\n        chain: {\n          id: connectedChainId,\n          unsupported: isUnsupported\n        },\n        provider\n      };\n      this.emit(\"connect\", connectionInfo);\n      return connectionInfo;\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      if (error.code === -32002) {\n        throw new ResourceUnavailableError(error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * disconnect from the injected provider\n   */\n  async disconnect() {\n    // perform cleanup\n    const provider = await this.getProvider();\n    if (!provider?.removeListener) {\n      return;\n    }\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n\n    // if shimDisconnect is enabled\n    if (this.options.shimDisconnect) {\n      // Remove the shimDisconnectKey => it signals that wallet is disconnected\n      await this.connectorStorage.removeItem(this.shimDisconnectKey);\n    }\n  }\n\n  /**\n   * @returns The first account address from the injected provider\n   */\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n\n    // return checksum address\n    // https://docs.ethers.org/v5/api/utils/address/#utils-getAddress\n    return utils.getAddress(accounts[0]);\n  }\n\n  /**\n   * @returns The `chainId` of the currently connected chain from injected provider normalized to a `number`\n   */\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    return provider.request({\n      method: \"eth_chainId\"\n    }).then(normalizeChainId);\n  }\n\n  /**\n   * get the injected provider\n   */\n  async getProvider() {\n    const provider = this.options.getProvider();\n    if (provider) {\n      this._provider = provider;\n      // setting listeners\n    }\n    return this._provider;\n  }\n\n  /**\n   * get a `signer` for given `chainId`\n   */\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n\n    // ethers.providers.Web3Provider\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n\n  /**\n   *\n   * @returns `true` if the connector is connected and address is available, else `false`\n   */\n  async isAuthorized() {\n    try {\n      // `false` if connector is disconnected\n      if (this.options.shimDisconnect &&\n      // If shim does not exist in storage, wallet is disconnected\n      !Boolean(await this.connectorStorage.getItem(this.shimDisconnectKey))) {\n        return false;\n      }\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      // `false` if no account address available, else `true`\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      // `false` if any error thrown\n      return false;\n    }\n  }\n\n  /**\n   * switch to given chain\n   */\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const chainIdHex = utils.hexValue(chainId);\n    try {\n      // request provider to switch to given chainIdHex\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainIdHex\n        }]\n      });\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\n      if (chain) {\n        return chain;\n      }\n      return {\n        chainId: chainId,\n        name: `Chain ${chainIdHex}`,\n        slug: `${chainIdHex}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpc: [\"\"],\n        chain: \"\",\n        shortName: \"\",\n        testnet: true\n      };\n    } catch (error) {\n      // if could not switch to given chainIdHex\n\n      // if tried to connect to a chain that is not configured\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\n      if (!chain) {\n        throw new ChainNotConfiguredError({\n          chainId,\n          connectorId: this.id\n        });\n      }\n\n      // if chain is not added to provider\n      if (error.code === 4902 ||\n      // Unwrapping for MetaMask Mobile\n      // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\n      error?.data?.originalError?.code === 4902) {\n        try {\n          // request provider to add chain\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: chainIdHex,\n              chainName: chain.name,\n              nativeCurrency: chain.nativeCurrency,\n              rpcUrls: getValidPublicRPCUrl(chain),\n              // no client id on purpose here\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\n            }]\n          });\n          return chain;\n        } catch (addError) {\n          // if user rejects request to add chain\n          if (this.isUserRejectedRequestError(addError)) {\n            throw new UserRejectedRequestError(error);\n          }\n\n          // else other error\n          throw new AddChainError();\n        }\n      }\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n}\n\nexport { InjectedConnector };\n"],"names":["InjectedConnector","_WagmiConnector","_inherits","_super","_createSuper","arg","_this","_classCallCheck","defaultOptions","shimDisconnect","getProvider","assertWindowEthereum","globalThis","window","ethereum","options","_objectSpread","call","chains","_defineProperty","_assertThisInitialized","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","accounts","wrap","_context","prev","next","length","emit","account","utils","stop","_x","apply","arguments","chainId","id","normalizeChainId","unsupported","isChainUnsupported","chain","_ref2","_callee2","error","_context2","code","sent","getAccount","abrupt","t0","connectorStorage","removeItem","shimDisconnectKey","_x2","_provider","name","detectedName","_ethereum$providers","_getName","getName","provider","isAvalanche","isBitKeep","isBraveWallet","isCoinbaseWallet","isExodus","isFrame","isKuCoinWallet","isMathWallet","isOneInchIOSWallet","isOneInchAndroidWallet","isOpera","isPortal","isTally","isTokenPocket","isTokenary","isTrust","isTrustWallet","isMetaMask","providers","_names$","_step","nameSet","Set","unknownCount","_iterator","_createForOfIteratorHelper","s","n","done","value","concat","add","err","e","f","names","_toConsumableArray","getInjectedName","ready","_createClass","key","_connect","_callee3","accountAddresses","firstAccountAddress","connectedChainId","isUnsupported","connectionInfo","_args3","_context3","undefined","this","ConnectorNotFoundError","setupListeners","type","request","method","getChainId","switchChain","console","setItem","t1","isUserRejectedRequestError","UserRejectedRequestError","ResourceUnavailableError","_disconnect","_callee4","_context4","removeListener","onAccountsChanged","onChainChanged","onDisconnect","_getAccount","_callee5","_context5","_getChainId","_callee6","_context6","then","_getProvider","_callee7","_context7","_getSigner","_callee8","_yield$Promise$all","_yield$Promise$all2","_args8","_context8","Promise","all","_slicedToArray","getSigner","_isAuthorized","_callee9","_context9","Boolean","getItem","t2","t3","_switchChain","_callee10","chainIdHex","_error$data","_chain2","_context10","params","find","_chain","slug","nativeCurrency","decimals","symbol","rpc","shortName","testnet","ChainNotConfiguredError","connectorId","data","originalError","chainName","rpcUrls","getValidPublicRPCUrl","blockExplorerUrls","getBlockExplorerUrls","AddChainError","SwitchChainError","_x3","_setupListeners","_callee11","_context11","on","WagmiConnector"],"sourceRoot":""}