{"version":3,"file":"static/js/4080.15f9d737.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/evm/connectors/magic-eden/dist/thirdweb-dev-wallets-evm-connectors-magic-eden.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError } from '../../../../dist/errors-9edc08c8.browser.esm.js';\nimport { w as walletIds } from '../../../../dist/walletIds-dff6dced.browser.esm.js';\nimport { InjectedConnector } from '../../injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js';\nimport { utils } from 'ethers';\nimport { g as getInjectedMagicEdenProvider } from '../../../../dist/getInjectedMagicEdenProvider-f8a9ec6a.browser.esm.js';\nimport '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '../../../../dist/assertWindowEthereum-88295886.browser.esm.js';\nimport '../../../../dist/url-a45219bd.browser.esm.js';\nimport '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\n\nclass MagicEdenConnector extends InjectedConnector {\n  constructor(arg) {\n    const defaultOptions = {\n      name: \"Magic Eden\",\n      shimDisconnect: true,\n      shimChainChangedDisconnect: true,\n      getProvider: getInjectedMagicEdenProvider\n    };\n    const options = {\n      ...defaultOptions,\n      ...arg.options\n    };\n    super({\n      chains: arg.chains,\n      options,\n      connectorStorage: arg.connectorStorage\n    });\n    _defineProperty(this, \"id\", walletIds.magicEden);\n  }\n\n  /**\n   * Connect to injected MagicEden Wallet provider\n   */\n  async connect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      this.setupListeners();\n\n      // emit \"connecting\" event\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n\n      // Attempt to show wallet select prompt with `wallet_requestPermissions` when\n      // `shimDisconnect` is active and account is in disconnected state (flag in storage)\n      let account = null;\n      if (this.options?.shimDisconnect && !Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))) {\n        account = await this.getAccount().catch(() => null);\n        const isConnected = !!account;\n        if (isConnected) {\n          // Attempt to show another prompt for selecting wallet if already connected\n          try {\n            await provider.request({\n              method: \"wallet_requestPermissions\",\n              params: [{\n                eth_accounts: {}\n              }]\n            });\n          } catch (error) {\n            // Not all injected providers support `wallet_requestPermissions` (e.g. iOS).\n            // Only bubble up error if user rejects request\n            if (this.isUserRejectedRequestError(error)) {\n              throw new UserRejectedRequestError(error);\n            }\n          }\n        }\n      }\n\n      // if account is not already set, request accounts and use the first account\n      if (!account) {\n        const accounts = await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        account = utils.getAddress(accounts[0]);\n      }\n\n      // get currently connected chainId\n      let connectedChainId = await this.getChainId();\n      // check if connected chain is unsupported\n      let isUnsupported = this.isChainUnsupported(connectedChainId);\n\n      // if chainId is given, but does not match the currently connected chainId, switch to the given chainId\n      if (options.chainId && connectedChainId !== options.chainId) {\n        try {\n          await this.switchChain(options.chainId);\n          // recalculate the chainId and isUnsupported\n          connectedChainId = options.chainId;\n          isUnsupported = this.isChainUnsupported(options.chainId);\n        } catch (e) {\n          console.error(`Could not switch to chain id : ${options.chainId}`, e);\n        }\n      }\n\n      // if shimDisconnect is enabled\n      if (this.options?.shimDisconnect) {\n        // add shimDisconnectKey in storage - this signals that connector is \"connected\"\n        await this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\n      }\n      const connectionInfo = {\n        chain: {\n          id: connectedChainId,\n          unsupported: isUnsupported\n        },\n        provider: provider,\n        account\n      };\n      this.emit(\"connect\", connectionInfo);\n      return connectionInfo;\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      if (error.code === -32002) {\n        throw new ResourceUnavailableError(error);\n      }\n      throw error;\n    }\n  }\n}\n\nexport { MagicEdenConnector };\n"],"names":["MagicEdenConnector","_InjectedConnector","_inherits","_super","_createSuper","arg","_this","_classCallCheck","defaultOptions","name","shimDisconnect","shimChainChangedDisconnect","getProvider","getInjectedMagicEdenProvider","options","_objectSpread","call","chains","connectorStorage","_defineProperty","_assertThisInitialized","walletIds","magicEden","_createClass","key","value","_connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this$options","_this$options2","provider","account","accounts","connectedChainId","isUnsupported","connectionInfo","_args","arguments","wrap","_context","prev","next","length","undefined","this","sent","ConnectorNotFoundError","setupListeners","emit","type","Boolean","getItem","shimDisconnectKey","getAccount","catch","request","method","params","eth_accounts","t0","isUserRejectedRequestError","UserRejectedRequestError","utils","getChainId","isChainUnsupported","chainId","switchChain","t1","console","error","concat","setItem","chain","id","unsupported","abrupt","t2","code","ResourceUnavailableError","stop","apply","InjectedConnector"],"sourceRoot":""}