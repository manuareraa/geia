{"version":3,"file":"static/js/8558.0da52905.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/token-drop-86fd9b8d.browser.esm.js"],"sourcesContent":["import { constants } from 'ethers';\nimport { dK as TOKEN_DROP_CONTRACT_ROLES, cs as ContractWrapper, bk as AbiSchema, dL as DropErc20ContractSchema, aM as resolveAddress, H as getRoleHash } from './index-42be4209.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-8e6a03fc.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-9892f94f.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-d99a82ef.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-c14063bd.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-93079777.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-41b5f9c8.browser.esm.js';\nimport { D as DropClaimConditions } from './drop-claim-conditions-6b858f0b.browser.esm.js';\nimport { S as StandardErc20 } from './erc-20-standard-f89fb4c3.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\nimport 'fast-deep-equal';\nimport './signature-89bf7caf.browser.esm.js';\nimport './normalizePriceValue-c906d886.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './assertEnabled-f866961a.browser.esm.js';\nimport './setErc20Allowance-96f7a033.browser.esm.js';\nimport 'uuid';\nimport './erc-20-db6129dc.browser.esm.js';\n\n/**\n * Create a Drop contract for a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"token-drop\");\n * ```\n * @internal\n * @deprecated use contract.erc20 instead\n */\nclass TokenDrop extends StandardErc20 {\n  static contractRoles = TOKEN_DROP_CONTRACT_ROLES;\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim Tokens, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 3117.42, // limit how many tokens are released in this presale\n   *     price: 0.001, // presale price per token\n   *     snapshot: ['0x...', '0x...'], // limit claiming to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.008, // public sale price per token\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc20ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, TokenDrop.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns The amount of voting power in tokens\n   */\n  async getVoteBalance() {\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\n  }\n  async getVoteBalanceOf(account) {\n    return await this.erc20.getValue(await this.contractWrapper.read(\"getVotes\", [await resolveAddress(account)]));\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns The address of your vote delegatee\n   */\n  async getDelegation() {\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns The address of your vote delegatee\n   */\n  async getDelegationOf(account) {\n    return await this.contractWrapper.read(\"delegates\", [await resolveAddress(account)]);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Claim a certain amount of tokens\n   * @remarks See {@link TokenDrop.claimTo}\n   * @param amount - the amount of tokens to mint\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   */\n  claim = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (amount) {\n      let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return _this.claimTo.prepare(await _this.contractWrapper.getSignerAddress(), amount, checkERC20Allowance);\n    };\n  })());\n\n  /**\n   * Claim a certain amount of tokens to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns  The transaction receipt\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (destinationAddress, amount) {\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return _this2.erc20.claimTo.prepare(destinationAddress, amount, {\n        checkERC20Allowance\n      });\n    };\n  })());\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  delegateTo = /* @__PURE__ */buildTransactionFunction(async delegateeAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"delegate\",\n      args: [await resolveAddress(delegateeAddress)]\n    });\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnTokens(amount);\n   * ```\n   */\n  burnTokens = /* @__PURE__ */buildTransactionFunction(async amount => {\n    return this.erc20.burn.prepare(amount);\n  });\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  burnFrom = /* @__PURE__ */buildTransactionFunction(async (holder, amount) => {\n    return this.erc20.burnFrom.prepare(holder, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { TokenDrop };\n"],"names":["TokenDrop","_StandardErc","_inherits","_super","_createSuper","network","address","storage","_this3","_classCallCheck","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","call","_defineProperty","_assertThisInitialized","buildTransactionFunction","_this","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","amount","checkERC20Allowance","_args","wrap","_context","prev","next","t0","claimTo","getSignerAddress","t1","sent","t2","t3","abrupt","prepare","stop","_x","apply","_this2","_ref2","_callee2","destinationAddress","_args2","_context2","erc20","_x2","_x3","_ref3","_callee3","delegateeAddress","_context3","Transaction","resolveAddress","t4","method","args","fromContractWrapper","_x4","_ref4","_callee4","_context4","burn","_x5","_ref5","_callee5","holder","_context5","burnFrom","_x6","_x7","AbiSchema","parse","metadata","ContractMetadata","DropErc20ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","sales","ContractPrimarySale","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","claimConditions","DropClaimConditions","_createClass","key","value","_getVoteBalance","_callee6","_context6","this","getVoteBalanceOf","_getVoteBalanceOf","_callee7","account","_context7","read","getValue","_x8","_getDelegation","_callee8","_context8","getDelegationOf","_getDelegationOf","_callee9","_context9","_x9","_isTransferRestricted","_callee10","anyoneCanTransfer","_context10","getRoleHash","constants","_prepare","_callee11","overrides","_context11","_x10","_x11","_x12","_call","_callee12","functionName","_context12","_x13","_x14","_x15","StandardErc20","TOKEN_DROP_CONTRACT_ROLES"],"sourceRoot":""}