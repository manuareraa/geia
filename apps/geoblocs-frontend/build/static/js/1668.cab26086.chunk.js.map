{"version":3,"file":"static/js/1668.cab26086.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError, C as ChainNotConfiguredError, A as AddChainError, S as SwitchChainError } from '../../../../dist/errors-9edc08c8.browser.esm.js';\nimport { a as assertWindowEthereum } from '../../../../dist/assertWindowEthereum-88295886.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nfunction getInjectedName(ethereum) {\n  if (!ethereum) {\n    return \"Injected\";\n  }\n  const getName = provider => {\n    if (provider.isAvalanche) {\n      return \"Core Wallet\";\n    }\n    if (provider.isBitKeep) {\n      return \"BitKeep\";\n    }\n    if (provider.isBraveWallet) {\n      return \"Brave Wallet\";\n    }\n    if (provider.isCoinbaseWallet) {\n      return \"Coinbase Wallet\";\n    }\n    if (provider.isExodus) {\n      return \"Exodus\";\n    }\n    if (provider.isFrame) {\n      return \"Frame\";\n    }\n    if (provider.isKuCoinWallet) {\n      return \"KuCoin Wallet\";\n    }\n    if (provider.isMathWallet) {\n      return \"MathWallet\";\n    }\n    if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) {\n      return \"1inch Wallet\";\n    }\n    if (provider.isOpera) {\n      return \"Opera\";\n    }\n    if (provider.isPortal) {\n      return \"Ripio Portal\";\n    }\n    if (provider.isTally) {\n      return \"Tally\";\n    }\n    if (provider.isTokenPocket) {\n      return \"TokenPocket\";\n    }\n    if (provider.isTokenary) {\n      return \"Tokenary\";\n    }\n    if (provider.isTrust || provider.isTrustWallet) {\n      return \"Trust Wallet\";\n    }\n    if (provider.isMetaMask) {\n      return \"MetaMask\";\n    }\n    if (provider.isImToken) {\n      return \"imToken\";\n    }\n  };\n\n  // Some injected providers detect multiple other providers and create a list at `ethers.providers`\n  if (ethereum.providers?.length) {\n    // Deduplicate names using Set\n    // Coinbase Wallet puts multiple providers in `ethereum.providers`\n    const nameSet = new Set();\n    let unknownCount = 1;\n    for (const provider of ethereum.providers) {\n      let name = getName(provider);\n      if (!name) {\n        name = `Unknown Wallet #${unknownCount}`;\n        unknownCount += 1;\n      }\n      nameSet.add(name);\n    }\n    const names = [...nameSet];\n    if (names.length) {\n      return names;\n    }\n    return names[0] ?? \"Injected\";\n  }\n  return getName(ethereum) ?? \"Injected\";\n}\n\nclass InjectedConnector extends WagmiConnector {\n  constructor(arg) {\n    const defaultOptions = {\n      shimDisconnect: true,\n      getProvider: () => {\n        if (assertWindowEthereum(globalThis.window)) {\n          return globalThis.window.ethereum;\n        }\n      }\n    };\n    const options = {\n      ...defaultOptions,\n      ...arg.options\n    };\n    super({\n      chains: arg.chains,\n      options\n    });\n    /**\n     * Name of the injected connector\n     */\n    /**\n     * Whether the connector is ready to be used\n     *\n     * `true` if the injected provider is found\n     */\n    _defineProperty(this, \"shimDisconnectKey\", \"injected.shimDisconnect\");\n    /**\n     * handles the `accountsChanged` event from the provider\n     * * emits `change` event if connected to a different account\n     * * emits `disconnect` event if no accounts available\n     */\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    /**\n     * handles the `chainChanged` event from the provider\n     * * emits `change` event if connected to a different chain\n     */\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    /**\n     * handles the `disconnect` event from the provider\n     * * emits `disconnect` event\n     */\n    _defineProperty(this, \"onDisconnect\", async error => {\n      // We need this as MetaMask can emit the \"disconnect\" event upon switching chains.\n      // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\n      // https://github.com/MetaMask/providers/pull/120\n      if (error.code === 1013) {\n        const provider = await this.getProvider();\n        if (provider) {\n          try {\n            const isAuthorized = await this.getAccount();\n            if (isAuthorized) {\n              return;\n            }\n          } catch {\n            // If we can't get the account anymore, continue with disconnect\n          }\n        }\n      }\n      this.emit(\"disconnect\");\n\n      // Remove `shimDisconnect` => it signals that wallet is disconnected\n      if (this.options.shimDisconnect) {\n        await this.connectorStorage.removeItem(this.shimDisconnectKey);\n      }\n    });\n    const _provider = options.getProvider();\n\n    // set the name of the connector\n    if (typeof options.name === \"string\") {\n      // if name is given, use that\n      this.name = options.name;\n    } else if (_provider) {\n      // if injected provider is detected, get name from it\n      const detectedName = getInjectedName(_provider);\n      if (options.name) {\n        this.name = options.name(detectedName);\n      } else {\n        if (typeof detectedName === \"string\") {\n          this.name = detectedName;\n        } else {\n          this.name = detectedName[0];\n        }\n      }\n    } else {\n      // else default to \"Injected\"\n      this.name = \"Injected\";\n    }\n    this.id = \"injected\";\n    this.ready = !!_provider;\n    this.connectorStorage = arg.connectorStorage;\n  }\n\n  /**\n   * * Connect to the injected provider\n   * * switch to the given chain if `chainId` is specified as an argument\n   */\n  async connect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      this.setupListeners();\n\n      // emit \"connecting\" event\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n\n      // request account addresses from injected provider\n      const accountAddresses = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      // get the first account address\n      const firstAccountAddress = utils.getAddress(accountAddresses[0]);\n\n      // Switch to given chain if a chainId is specified\n      let connectedChainId = await this.getChainId();\n      // Check if currently connected chain is unsupported\n      // chainId is considered unsupported if chainId is not in the list of this.chains array\n      let isUnsupported = this.isChainUnsupported(connectedChainId);\n\n      // if chainId is specified and it is not the same as the currently connected chain\n      if (options.chainId && connectedChainId !== options.chainId) {\n        // switch to the given chain\n        try {\n          await this.switchChain(options.chainId);\n          // recalculate connectedChainId and isUnsupported\n          connectedChainId = options.chainId;\n          isUnsupported = this.isChainUnsupported(options.chainId);\n        } catch (e) {\n          console.error(`Could not switch to chain id: ${options.chainId}`, e);\n        }\n      }\n\n      // if shimDisconnect is enabled\n      if (this.options.shimDisconnect) {\n        // add the shim shimDisconnectKey => it signals that wallet is connected\n        await this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\n      }\n      const connectionInfo = {\n        account: firstAccountAddress,\n        chain: {\n          id: connectedChainId,\n          unsupported: isUnsupported\n        },\n        provider\n      };\n      this.emit(\"connect\", connectionInfo);\n      return connectionInfo;\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      if (error.code === -32002) {\n        throw new ResourceUnavailableError(error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * disconnect from the injected provider\n   */\n  async disconnect() {\n    // perform cleanup\n    const provider = await this.getProvider();\n    if (!provider?.removeListener) {\n      return;\n    }\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n\n    // if shimDisconnect is enabled\n    if (this.options.shimDisconnect) {\n      // Remove the shimDisconnectKey => it signals that wallet is disconnected\n      await this.connectorStorage.removeItem(this.shimDisconnectKey);\n    }\n  }\n\n  /**\n   * @returns The first account address from the injected provider\n   */\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n\n    // return checksum address\n    // https://docs.ethers.org/v5/api/utils/address/#utils-getAddress\n    return utils.getAddress(accounts[0]);\n  }\n\n  /**\n   * @returns The `chainId` of the currently connected chain from injected provider normalized to a `number`\n   */\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    return provider.request({\n      method: \"eth_chainId\"\n    }).then(normalizeChainId);\n  }\n\n  /**\n   * get the injected provider\n   */\n  async getProvider() {\n    const provider = this.options.getProvider();\n    if (provider) {\n      this._provider = provider;\n      // setting listeners\n    }\n    return this._provider;\n  }\n\n  /**\n   * get a `signer` for given `chainId`\n   */\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n\n    // ethers.providers.Web3Provider\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n\n  /**\n   *\n   * @returns `true` if the connector is connected and address is available, else `false`\n   */\n  async isAuthorized() {\n    try {\n      // `false` if connector is disconnected\n      if (this.options.shimDisconnect &&\n      // If shim does not exist in storage, wallet is disconnected\n      !Boolean(await this.connectorStorage.getItem(this.shimDisconnectKey))) {\n        return false;\n      }\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      // `false` if no account address available, else `true`\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      // `false` if any error thrown\n      return false;\n    }\n  }\n\n  /**\n   * switch to given chain\n   */\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const chainIdHex = utils.hexValue(chainId);\n    try {\n      // request provider to switch to given chainIdHex\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainIdHex\n        }]\n      });\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\n      if (chain) {\n        return chain;\n      }\n      return {\n        chainId: chainId,\n        name: `Chain ${chainIdHex}`,\n        slug: `${chainIdHex}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpc: [\"\"],\n        chain: \"\",\n        shortName: \"\",\n        testnet: true\n      };\n    } catch (error) {\n      // if could not switch to given chainIdHex\n\n      // if tried to connect to a chain that is not configured\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\n      if (!chain) {\n        throw new ChainNotConfiguredError({\n          chainId,\n          connectorId: this.id\n        });\n      }\n\n      // if chain is not added to provider\n      if (error.code === 4902 ||\n      // Unwrapping for MetaMask Mobile\n      // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\n      error?.data?.originalError?.code === 4902) {\n        try {\n          // request provider to add chain\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: chainIdHex,\n              chainName: chain.name,\n              nativeCurrency: chain.nativeCurrency,\n              rpcUrls: getValidPublicRPCUrl(chain),\n              // no client id on purpose here\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\n            }]\n          });\n          return chain;\n        } catch (addError) {\n          // if user rejects request to add chain\n          if (this.isUserRejectedRequestError(addError)) {\n            throw new UserRejectedRequestError(error);\n          }\n\n          // else other error\n          throw new AddChainError();\n        }\n      }\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n}\n\nexport { InjectedConnector };\n"],"names":["InjectedConnector","_WagmiConnector","_inherits","_super","_createSuper","arg","_this","_classCallCheck","defaultOptions","shimDisconnect","getProvider","assertWindowEthereum","globalThis","window","ethereum","options","_objectSpread","call","chains","_defineProperty","_assertThisInitialized","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","accounts","wrap","_context","prev","next","length","emit","account","utils","stop","_x","apply","arguments","chainId","id","normalizeChainId","unsupported","isChainUnsupported","chain","_ref2","_callee2","error","_context2","code","sent","getAccount","abrupt","t0","connectorStorage","removeItem","shimDisconnectKey","_x2","_provider","name","detectedName","_ethereum$providers","_getName","getName","provider","isAvalanche","isBitKeep","isBraveWallet","isCoinbaseWallet","isExodus","isFrame","isKuCoinWallet","isMathWallet","isOneInchIOSWallet","isOneInchAndroidWallet","isOpera","isPortal","isTally","isTokenPocket","isTokenary","isTrust","isTrustWallet","isMetaMask","isImToken","providers","_names$","_step","nameSet","Set","unknownCount","_iterator","_createForOfIteratorHelper","s","n","done","value","concat","add","err","e","f","names","_toConsumableArray","getInjectedName","ready","_createClass","key","_connect","_callee3","accountAddresses","firstAccountAddress","connectedChainId","isUnsupported","connectionInfo","_args3","_context3","undefined","this","ConnectorNotFoundError","setupListeners","type","request","method","getChainId","switchChain","console","setItem","t1","isUserRejectedRequestError","UserRejectedRequestError","ResourceUnavailableError","_disconnect","_callee4","_context4","removeListener","onAccountsChanged","onChainChanged","onDisconnect","_getAccount","_callee5","_context5","_getChainId","_callee6","_context6","then","_getProvider","_callee7","_context7","_getSigner","_callee8","_yield$Promise$all","_yield$Promise$all2","_args8","_context8","Promise","all","_slicedToArray","getSigner","_isAuthorized","_callee9","_context9","Boolean","getItem","t2","t3","_switchChain","_callee10","chainIdHex","_error$data","_chain2","_context10","params","find","_chain","slug","nativeCurrency","decimals","symbol","rpc","shortName","testnet","ChainNotConfiguredError","connectorId","data","originalError","chainName","rpcUrls","getValidPublicRPCUrl","blockExplorerUrls","getBlockExplorerUrls","AddChainError","SwitchChainError","_x3","_setupListeners","_callee11","_context11","on","WagmiConnector"],"sourceRoot":""}