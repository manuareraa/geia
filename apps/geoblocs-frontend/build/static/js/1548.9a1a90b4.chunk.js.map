{"version":3,"file":"static/js/1548.9a1a90b4.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-a092d922.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-sales-506e742d.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/erc-20-standard-99c81d57.browser.esm.js"],"sourcesContent":["/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n","import { d as buildTransactionFunction, T as Transaction } from './transactions-36db603a.browser.esm.js';\nimport { dq as FEATURE_PLATFORM_FEE, bF as CommonPlatformFeeSchema } from './index-7599d8dd.browser.esm.js';\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFees.get();\n * await contract.platformFees.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\nclass ContractPlatformFee {\n  featureName = FEATURE_PLATFORM_FEE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * const feeInfo = await contract.platformFees.get();\n   * console.log(feeInfo.platform_fee_recipient);\n   * console.log(feeInfo.platform_fee_basis_points);\n   * ```\n   * @twfeature PlatformFee\n   */\n  async get() {\n    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read(\"getPlatformFeeInfo\", []);\n    return CommonPlatformFeeSchema.parseAsync({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * await contract.platformFees.set({\n   *   platform_fee_basis_points: 100, // 1% fee\n   *   platform_fee_recipient: \"0x...\" // the fee recipient\n   * })\n   * ```\n   *\n   * @param platformFeeInfo - the platform fee information\n   * @twfeature PlatformFee\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async platformFeeInfo => {\n    const parsed = await CommonPlatformFeeSchema.parseAsync(platformFeeInfo);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPlatformFeeInfo\",\n      args: [parsed.platform_fee_recipient, parsed.platform_fee_basis_points]\n    });\n  });\n}\n\nexport { ContractPlatformFee as C };\n","import { d as buildTransactionFunction, T as Transaction } from './transactions-36db603a.browser.esm.js';\nimport { d3 as FEATURE_PRIMARY_SALE } from './index-7599d8dd.browser.esm.js';\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  featureName = FEATURE_PRIMARY_SALE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient\n   * @returns The wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    const result = await this.contractWrapper.read(\"primarySaleRecipient\", []);\n    return result;\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   * @example\n   * ```javascript\n   * await contract.sales.setRecipient(recipientWalletAddress);\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  setRecipient = /* @__PURE__ */buildTransactionFunction(async recipient => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPrimarySaleRecipient\",\n      args: [recipient]\n    });\n  });\n}\n\nexport { ContractPrimarySale as C };\n","import { d as buildTransactionFunction } from './transactions-36db603a.browser.esm.js';\nimport { E as Erc20 } from './erc-20-a5f1dd8c.browser.esm.js';\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.transfer(walletAddress, amount);\n * ```\n * @public\n */\nclass StandardErc20 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc20 = new Erc20(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the token Metadata (name, symbol, etc...)\n   *\n   * @example\n   * ```javascript\n   * const token = await contract.get();\n   * ```\n   * @returns The token metadata\n   */\n  async get() {\n    return this.erc20.get();\n  }\n\n  /**\n   * Get Token Balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balance() {\n    return await this.erc20.balance();\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balanceOf(address) {\n    return this.erc20.balanceOf(address);\n  }\n\n  /**\n   * The total supply for this token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.totalSupply();\n   * ```\n   */\n  async totalSupply() {\n    return await this.erc20.totalSupply();\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowance(spender) {\n    return await this.erc20.allowance(spender);\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowanceOf(owner, spender) {\n    return await this.erc20.allowanceOf(owner, spender);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   * await contract.transfer(toAddress, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return this.erc20.transfer.prepare(to, amount);\n  });\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   */\n  transferFrom = /* @__PURE__ */buildTransactionFunction(async (from, to, amount) => {\n    return this.erc20.transferFrom.prepare(from, to, amount);\n  });\n\n  /**\n   * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   * await contract.setAllowance(spenderAddress, amount);\n   * ```\n   */\n  setAllowance = /* @__PURE__ */buildTransactionFunction(async (spender, amount) => {\n    return this.erc20.setAllowance.prepare(spender, amount);\n  });\n\n  /**\n   * Transfer Tokens To Many Wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.transferBatch(data);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */buildTransactionFunction(async args => {\n    return this.erc20.transferBatch.prepare(args);\n  });\n}\n\nexport { StandardErc20 as S };\n"],"names":["ContractInterceptor","contractWrapper","_classCallCheck","this","_createClass","key","value","hook","withTransactionOverride","ContractPlatformFee","_this","_defineProperty","FEATURE_PLATFORM_FEE","name","buildTransactionFunction","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","platformFeeInfo","parsed","wrap","_context","prev","next","CommonPlatformFeeSchema","parseAsync","sent","abrupt","Transaction","fromContractWrapper","method","args","platform_fee_recipient","platform_fee_basis_points","stop","_x","apply","arguments","_get","_callee2","_yield$this$contractW","_yield$this$contractW2","platformFeeRecipient","platformFeeBps","_context2","read","_slicedToArray","ContractPrimarySale","FEATURE_PRIMARY_SALE","recipient","_getRecipient","result","StandardErc20","storage","chainId","to","amount","erc20","transfer","prepare","_x2","_ref2","from","transferFrom","_x3","_x4","_x5","_ref3","_callee3","spender","_context3","setAllowance","_x6","_x7","_ref4","_callee4","_context4","transferBatch","_x8","Erc20","_chainId","get","network","updateSignerOrProvider","address","_callee5","_context5","_balance","_callee6","_context6","balance","_balanceOf","_callee7","_context7","balanceOf","_x9","_totalSupply","_callee8","_context8","totalSupply","_allowance","_callee9","_context9","allowance","_x10","_allowanceOf","_callee10","owner","_context10","allowanceOf","_x11","_x12"],"sourceRoot":""}