{"version":3,"file":"static/js/4038.9b86ae6b.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/errors-9edc08c8.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js"],"sourcesContent":["import { defaultChains } from '@thirdweb-dev/chains';\nimport EventEmitter from 'eventemitter3';\n\nclass WagmiConnector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n    this.chains = chains;\n    this.options = options;\n  }\n  getBlockExplorerUrls(chain) {\n    const explorers = chain.explorers?.map(x => x.url) ?? [];\n    return explorers.length > 0 ? explorers : undefined;\n  }\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.chainId === chainId);\n  }\n  updateChains(chains) {\n    this.chains = chains;\n  }\n}\n\nexport { WagmiConnector as W };\n","import { _ as _defineProperty } from './defineProperty-350fc508.browser.esm.js';\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nclass RpcError extends Error {\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(`${message}. Cause: ${JSON.stringify(cause)}`);\n    this.cause = cause;\n    this.code = code;\n    this.data = data;\n  }\n}\n\n/**\n * @internal\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nclass ProviderRpcError extends RpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the `1000 <= 4999` range.\n   */\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(message, {\n      cause,\n      code,\n      data\n    });\n  }\n}\n\n/**\n * @internal\n */\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"AddChainError\");\n    _defineProperty(this, \"message\", \"Error adding chain\");\n  }\n}\n\n/**\n * @internal\n */\nclass ChainNotConfiguredError extends Error {\n  constructor(_ref) {\n    let {\n      chainId,\n      connectorId\n    } = _ref;\n    super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n    _defineProperty(this, \"name\", \"ChainNotConfigured\");\n  }\n}\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"ConnectorNotFoundError\");\n    _defineProperty(this, \"message\", \"Connector not found\");\n  }\n}\nclass ResourceUnavailableError extends RpcError {\n  constructor(cause) {\n    super(\"Resource unavailable\", {\n      cause,\n      code: -32002\n    });\n    _defineProperty(this, \"name\", \"ResourceUnavailable\");\n  }\n}\n/**\n * @internal\n */\nclass SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"Error switching chain\", {\n      cause,\n      code: 4902\n    });\n    _defineProperty(this, \"name\", \"SwitchChainError\");\n  }\n}\n/**\n * @internal\n */\nclass UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"User rejected request\", {\n      cause,\n      code: 4001\n    });\n    _defineProperty(this, \"name\", \"UserRejectedRequestError\");\n  }\n}\n\n/**\n * @internal\n */\n// Ethers does not have an error type so we can use this for casting\n// https://github.com/ethers-io/ethers.js/blob/main/packages/logger/src.ts/index.ts#L268\n\nexport { AddChainError as A, ChainNotConfiguredError as C, ProviderRpcError as P, ResourceUnavailableError as R, SwitchChainError as S, UserRejectedRequestError as U, ConnectorNotFoundError as a };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { U as UserRejectedRequestError, S as SwitchChainError } from '../../../../dist/errors-9edc08c8.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-dff6dced.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nconst chainsToRequest = new Set([1, 137, 10, 42161, 56]);\nconst NAMESPACE = \"eip155\";\nconst REQUESTED_CHAINS_KEY = \"wagmi.requestedChains\";\nconst ADD_ETH_CHAIN_METHOD = \"wallet_addEthereumChain\";\nconst LAST_USED_CHAIN_ID = \"last-used-chain-id\";\nclass WalletConnectConnector extends WagmiConnector {\n  constructor(config) {\n    super({\n      ...config,\n      options: {\n        isNewChainsStale: true,\n        ...config.options\n      }\n    });\n    _defineProperty(this, \"id\", walletIds.walletConnect);\n    _defineProperty(this, \"name\", \"WalletConnect\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        if (accounts[0]) {\n          this.emit(\"change\", {\n            account: utils.getAddress(accounts[0])\n          });\n        }\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", async chainId => {\n      const id = Number(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      await this._storage.setItem(LAST_USED_CHAIN_ID, String(chainId));\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      await this._setRequestedChainsIds([]);\n      await this._storage.removeItem(LAST_USED_CHAIN_ID);\n      this.emit(\"disconnect\");\n    });\n    _defineProperty(this, \"onDisplayUri\", uri => {\n      this.emit(\"message\", {\n        type: \"display_uri\",\n        data: uri\n      });\n    });\n    _defineProperty(this, \"onConnect\", () => {\n      this.emit(\"connect\", {\n        provider: this._provider\n      });\n    });\n    this._storage = config.options.storage;\n    this._createProvider();\n    this.filteredChains = this.chains.length > 50 ? this.chains.filter(c => {\n      return chainsToRequest.has(c.chainId);\n    }) : this.chains;\n    this.showWalletConnectModal = this.options.qrcode !== false;\n  }\n  async connect() {\n    let {\n      chainId: chainIdP,\n      pairingTopic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      let targetChainId = chainIdP;\n      if (!targetChainId) {\n        const lastUsedChainIdStr = await this._storage.getItem(LAST_USED_CHAIN_ID);\n        const lastUsedChainId = lastUsedChainIdStr ? parseInt(lastUsedChainIdStr) : undefined;\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) {\n          targetChainId = lastUsedChainId;\n        } else {\n          targetChainId = this.filteredChains[0]?.chainId;\n        }\n      }\n      if (!targetChainId) {\n        throw new Error(\"No chains found on connector.\");\n      }\n      const provider = await this.getProvider();\n      this.setupListeners();\n      if (provider.session) {\n        await provider.disconnect();\n        const optionalChains = this.filteredChains.filter(chain => chain.chainId !== targetChainId).map(optionalChain => optionalChain.chainId);\n        this.emit(\"message\", {\n          type: \"connecting\"\n        });\n        await provider.connect({\n          pairingTopic,\n          chains: [targetChainId],\n          optionalChains: optionalChains.length > 0 ? optionalChains : [targetChainId]\n        });\n        await this._setRequestedChainsIds(this.filteredChains.map(_ref => {\n          let {\n            chainId\n          } = _ref;\n          return chainId;\n        }));\n      }\n\n      // If session exists and chains are authorized, enable provider for required chain\n      const accounts = await provider.enable();\n      if (!accounts[0]) {\n        throw new Error(\"No accounts found on provider.\");\n      }\n      const account = utils.getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider: new providers.Web3Provider(provider)\n      };\n    } catch (error) {\n      if (/user rejected/i.test(error?.message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const cleanup = () => {\n      if (typeof localStorage === \"undefined\") {\n        return;\n      }\n      for (const key in localStorage) {\n        if (key.startsWith(\"wc@2\")) {\n          localStorage.removeItem(key);\n        }\n      }\n    };\n    cleanup();\n    const provider = await this.getProvider();\n    const disconnectProvider = async () => {\n      try {\n        await provider.disconnect();\n      } catch (error) {\n        if (!/No matching key/i.test(error.message)) {\n          throw error;\n        }\n      } finally {\n        this._removeListeners();\n        await this._setRequestedChainsIds([]);\n        cleanup();\n      }\n    };\n    disconnectProvider();\n  }\n  async getAccount() {\n    const {\n      accounts\n    } = await this.getProvider();\n    if (!accounts[0]) {\n      throw new Error(\"No accounts found on provider.\");\n    }\n    return utils.getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const {\n      chainId\n    } = await this.getProvider();\n    return chainId;\n  }\n  async getProvider() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this._provider) {\n      await this._createProvider();\n    }\n    if (chainId) {\n      await this.switchChain(chainId);\n    }\n    if (!this._provider) {\n      throw new Error(\"No provider found.\");\n    }\n    return this._provider;\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider({\n      chainId\n    }), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const [account, provider] = await Promise.all([this.getAccount(), this.getProvider()]);\n      const isChainsStale = await this._isChainsStale();\n\n      // If an account does not exist on the session, then the connector is unauthorized.\n      if (!account) {\n        return false;\n      }\n\n      // If the chains are stale on the session, then the connector is unauthorized.\n      if (isChainsStale && provider.session) {\n        try {\n          await provider.disconnect();\n        } catch {} // eslint-disable-line no-empty\n        return false;\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const chain = this.chains.find(chain_ => chain_.chainId === chainId);\n    if (!chain) {\n      throw new SwitchChainError(`Chain with ID: ${chainId}, not found on connector.`);\n    }\n    try {\n      const provider = await this.getProvider();\n      const namespaceChains = this._getNamespaceChainsIds();\n      const namespaceMethods = this._getNamespaceMethods();\n      const isChainApproved = namespaceChains.includes(chainId);\n      if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n        const firstExplorer = chain.explorers && chain.explorers[0];\n        const blockExplorerUrls = firstExplorer ? {\n          blockExplorerUrls: [firstExplorer.url]\n        } : {};\n        await provider.request({\n          method: ADD_ETH_CHAIN_METHOD,\n          params: [{\n            chainId: utils.hexValue(chain.chainId),\n            chainName: chain.name,\n            nativeCurrency: chain.nativeCurrency,\n            rpcUrls: getValidPublicRPCUrl(chain),\n            // no clientId on purpose\n            ...blockExplorerUrls\n          }]\n        });\n        const requestedChains = await this._getRequestedChainsIds();\n        requestedChains.push(chainId);\n        await this._setRequestedChainsIds(requestedChains);\n      }\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: utils.hexValue(chainId)\n        }]\n      });\n      return chain;\n    } catch (error) {\n      const message = typeof error === \"string\" ? error : error?.message;\n      if (/user rejected request/i.test(message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async _createProvider() {\n    if (!this._initProviderPromise && \"object\" !== \"undefined\") {\n      this._initProviderPromise = this.initProvider();\n    }\n    return this._initProviderPromise;\n  }\n  async initProvider() {\n    const {\n      default: EthereumProvider,\n      OPTIONAL_EVENTS,\n      OPTIONAL_METHODS\n    } = await import('@walletconnect/ethereum-provider');\n    const [defaultChain, ...optionalChains] = this.filteredChains.map(_ref2 => {\n      let {\n        chainId\n      } = _ref2;\n      return chainId;\n    });\n    if (defaultChain) {\n      // EthereumProvider populates & deduplicates required methods and events internally\n      this._provider = await EthereumProvider.init({\n        showQrModal: this.showWalletConnectModal,\n        projectId: this.options.projectId,\n        optionalMethods: OPTIONAL_METHODS,\n        optionalEvents: OPTIONAL_EVENTS,\n        chains: [defaultChain],\n        optionalChains: optionalChains,\n        metadata: {\n          name: this.options.dappMetadata.name,\n          description: this.options.dappMetadata.description || \"\",\n          url: this.options.dappMetadata.url,\n          icons: [this.options.dappMetadata.logoUrl || \"\"]\n        },\n        rpcMap: Object.fromEntries(this.filteredChains.map(chain => [chain.chainId, chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n        ])),\n        qrModalOptions: this.options.qrModalOptions\n      });\n    }\n  }\n\n  /**\n   * Checks if the target chains match the chains that were\n   * initially requested by the connector for the WalletConnect session.\n   * If there is a mismatch, this means that the chains on the connector\n   * are considered stale, and need to be revalidated at a later point (via\n   * connection).\n   *\n   * There may be a scenario where a dapp adds a chain to the\n   * connector later on, however, this chain will not have been approved or rejected\n   * by the wallet. In this case, the chain is considered stale.\n   *\n   * There are exceptions however:\n   * -  If the wallet supports dynamic chain addition via `eth_addEthereumChain`,\n   *    then the chain is not considered stale.\n   * -  If the `isNewChainsStale` flag is falsy on the connector, then the chain is\n   *    not considered stale.\n   *\n   * For the above cases, chain validation occurs dynamically when the user\n   * attempts to switch chain.\n   *\n   * Also check that dapp supports at least 1 chain from previously approved session.\n   */\n  async _isChainsStale() {\n    const namespaceMethods = this._getNamespaceMethods();\n    if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n      return false;\n    }\n    if (!this.options.isNewChainsStale) {\n      return false;\n    }\n    const requestedChains = await this._getRequestedChainsIds();\n    const connectorChains = this.filteredChains.map(_ref3 => {\n      let {\n        chainId\n      } = _ref3;\n      return chainId;\n    });\n    const namespaceChains = this._getNamespaceChainsIds();\n    if (namespaceChains.length && !namespaceChains.some(id => connectorChains.includes(id))) {\n      return false;\n    }\n    return !connectorChains.every(id => requestedChains.includes(id));\n  }\n  async setupListeners() {\n    if (!this._provider) {\n      return;\n    }\n    this._removeListeners();\n    this._provider.on(\"accountsChanged\", this.onAccountsChanged);\n    this._provider.on(\"chainChanged\", this.onChainChanged);\n    this._provider.on(\"disconnect\", this.onDisconnect);\n    this._provider.on(\"session_delete\", this.onDisconnect);\n    this._provider.on(\"display_uri\", this.onDisplayUri);\n    this._provider.on(\"connect\", this.onConnect);\n  }\n  _removeListeners() {\n    if (!this._provider) {\n      return;\n    }\n    this._provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    this._provider.removeListener(\"chainChanged\", this.onChainChanged);\n    this._provider.removeListener(\"disconnect\", this.onDisconnect);\n    this._provider.removeListener(\"session_delete\", this.onDisconnect);\n    this._provider.removeListener(\"display_uri\", this.onDisplayUri);\n    this._provider.removeListener(\"connect\", this.onConnect);\n  }\n  async _setRequestedChainsIds(chains) {\n    await this._storage.setItem(REQUESTED_CHAINS_KEY, JSON.stringify(chains));\n  }\n  async _getRequestedChainsIds() {\n    const data = await this._storage.getItem(REQUESTED_CHAINS_KEY);\n    return data ? JSON.parse(data) : [];\n  }\n  _getNamespaceChainsIds() {\n    if (!this._provider) {\n      return [];\n    }\n    const chainIds = this._provider.session?.namespaces[NAMESPACE]?.chains?.map(chain => parseInt(chain.split(\":\")[1] || \"\"));\n    return chainIds ?? [];\n  }\n  _getNamespaceMethods() {\n    if (!this._provider) {\n      return [];\n    }\n    const methods = this._provider.session?.namespaces[NAMESPACE]?.methods;\n    return methods ?? [];\n  }\n}\n\nexport { WalletConnectConnector };\n"],"names":["WagmiConnector","_EventEmitter","_inherits","_super","_createSuper","_ref","_this","_classCallCheck","_ref$chains","chains","defaultChains","options","call","_createClass","key","value","chain","_chain$explorers$map","_chain$explorers","explorers","map","x","url","length","undefined","chainId","this","some","EventEmitter","RpcError","_Error","message","cause","code","data","Number","isInteger","Error","concat","JSON","stringify","_wrapNativeSuper","ProviderRpcError","_RpcError","_super2","AddChainError","_Error2","_super3","_this2","apply","arguments","_defineProperty","_assertThisInitialized","ChainNotConfiguredError","_Error3","_super4","_this3","connectorId","ConnectorNotFoundError","_Error4","_super5","_this4","ResourceUnavailableError","_RpcError2","_super6","_this5","SwitchChainError","_ProviderRpcError","_super7","_this6","UserRejectedRequestError","_ProviderRpcError2","_super8","_this7","chainsToRequest","Set","NAMESPACE","REQUESTED_CHAINS_KEY","ADD_ETH_CHAIN_METHOD","LAST_USED_CHAIN_ID","WalletConnectConnector","_WagmiConnector","config","_objectSpread","isNewChainsStale","walletIds","walletConnect","accounts","emit","account","utils","_ref4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","unsupported","wrap","_context","prev","next","isChainUnsupported","_storage","setItem","String","stop","_x","_callee2","_context2","_setRequestedChainsIds","removeItem","uri","type","provider","_provider","storage","_createProvider","filteredChains","filter","c","has","showWalletConnectModal","qrcode","_connect","_callee3","_ref6","chainIdP","pairingTopic","targetChainId","lastUsedChainIdStr","lastUsedChainId","_this$filteredChains$","optionalChains","_args3","_context3","getItem","sent","parseInt","getProvider","setupListeners","session","disconnect","optionalChain","connect","enable","getChainId","abrupt","providers","t0","test","_disconnect","_callee5","cleanup","disconnectProvider","_context5","localStorage","startsWith","_ref7","_callee4","_context4","_removeListeners","finish","_getAccount","_callee6","_yield$this$getProvid","_context6","_getChainId","_callee7","_yield$this$getProvid2","_context7","_getProvider","_callee8","_args8","_context8","switchChain","_getSigner","_callee9","_yield$Promise$all","_yield$Promise$all2","_args9","_context9","Promise","all","getAccount","_slicedToArray","getSigner","_isAuthorized","_callee10","_yield$Promise$all3","_yield$Promise$all4","isChainsStale","_context10","_isChainsStale","t1","_switchChain","_callee11","namespaceChains","namespaceMethods","firstExplorer","blockExplorerUrls","requestedChains","_context11","find","chain_","_getNamespaceChainsIds","_getNamespaceMethods","includes","request","method","params","chainName","name","nativeCurrency","rpcUrls","getValidPublicRPCUrl","_getRequestedChainsIds","push","_x2","_createProvider2","_callee12","_context12","_initProviderPromise","initProvider","_initProvider","_callee13","_yield$import","EthereumProvider","OPTIONAL_EVENTS","OPTIONAL_METHODS","_this$filteredChains$2","_this$filteredChains$3","defaultChain","_context13","default","_ref2","_toArray","slice","init","showQrModal","projectId","optionalMethods","optionalEvents","metadata","dappMetadata","description","icons","logoUrl","rpcMap","Object","fromEntries","rpc","qrModalOptions","_isChainsStale2","_callee14","connectorChains","_context14","_ref3","every","_setupListeners","_callee15","_context15","on","onAccountsChanged","onChainChanged","onDisconnect","onDisplayUri","onConnect","removeListener","_setRequestedChainsIds2","_callee16","_context16","_x3","_getRequestedChainsIds2","_callee17","_context17","parse","_this$_provider$sessi","chainIds","namespaces","split","_this$_provider$sessi2","methods"],"sourceRoot":""}