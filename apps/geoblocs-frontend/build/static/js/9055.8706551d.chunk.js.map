{"version":3,"file":"static/js/9055.8706551d.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { U as UserRejectedRequestError, S as SwitchChainError } from '../../../../dist/errors-9edc08c8.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-dff6dced.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nconst chainsToRequest = new Set([1, 137, 10, 42161, 56]);\nconst NAMESPACE = \"eip155\";\nconst REQUESTED_CHAINS_KEY = \"wagmi.requestedChains\";\nconst ADD_ETH_CHAIN_METHOD = \"wallet_addEthereumChain\";\nconst LAST_USED_CHAIN_ID = \"last-used-chain-id\";\nclass WalletConnectConnector extends WagmiConnector {\n  constructor(config) {\n    super({\n      ...config,\n      options: {\n        isNewChainsStale: true,\n        ...config.options\n      }\n    });\n    _defineProperty(this, \"id\", walletIds.walletConnect);\n    _defineProperty(this, \"name\", \"WalletConnect\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        if (accounts[0]) {\n          this.emit(\"change\", {\n            account: utils.getAddress(accounts[0])\n          });\n        }\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", async chainId => {\n      const id = Number(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      await this._storage.setItem(LAST_USED_CHAIN_ID, String(chainId));\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      await this._setRequestedChainsIds([]);\n      await this._storage.removeItem(LAST_USED_CHAIN_ID);\n      this.emit(\"disconnect\");\n    });\n    _defineProperty(this, \"onDisplayUri\", uri => {\n      this.emit(\"message\", {\n        type: \"display_uri\",\n        data: uri\n      });\n    });\n    _defineProperty(this, \"onConnect\", () => {\n      this.emit(\"connect\", {\n        provider: this._provider\n      });\n    });\n    this._storage = config.options.storage;\n    this._createProvider();\n    this.filteredChains = this.chains.length > 50 ? this.chains.filter(c => {\n      return chainsToRequest.has(c.chainId);\n    }) : this.chains;\n    this.showWalletConnectModal = this.options.qrcode !== false;\n  }\n  async connect() {\n    let {\n      chainId: chainIdP,\n      pairingTopic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      let targetChainId = chainIdP;\n      if (!targetChainId) {\n        const lastUsedChainIdStr = await this._storage.getItem(LAST_USED_CHAIN_ID);\n        const lastUsedChainId = lastUsedChainIdStr ? parseInt(lastUsedChainIdStr) : undefined;\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) {\n          targetChainId = lastUsedChainId;\n        } else {\n          targetChainId = this.filteredChains[0]?.chainId;\n        }\n      }\n      if (!targetChainId) {\n        throw new Error(\"No chains found on connector.\");\n      }\n      const provider = await this.getProvider();\n      this.setupListeners();\n      if (provider.session) {\n        await provider.disconnect();\n        const optionalChains = this.filteredChains.filter(chain => chain.chainId !== targetChainId).map(optionalChain => optionalChain.chainId);\n        this.emit(\"message\", {\n          type: \"connecting\"\n        });\n        await provider.connect({\n          pairingTopic,\n          chains: [targetChainId],\n          optionalChains: optionalChains.length > 0 ? optionalChains : [targetChainId]\n        });\n        await this._setRequestedChainsIds(this.filteredChains.map(_ref => {\n          let {\n            chainId\n          } = _ref;\n          return chainId;\n        }));\n      }\n\n      // If session exists and chains are authorized, enable provider for required chain\n      const accounts = await provider.enable();\n      if (!accounts[0]) {\n        throw new Error(\"No accounts found on provider.\");\n      }\n      const account = utils.getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider: new providers.Web3Provider(provider)\n      };\n    } catch (error) {\n      if (/user rejected/i.test(error?.message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const cleanup = () => {\n      if (typeof localStorage === \"undefined\") {\n        return;\n      }\n      for (const key in localStorage) {\n        if (key.startsWith(\"wc@2\")) {\n          localStorage.removeItem(key);\n        }\n      }\n    };\n    cleanup();\n    const provider = await this.getProvider();\n    const disconnectProvider = async () => {\n      try {\n        await provider.disconnect();\n      } catch (error) {\n        if (!/No matching key/i.test(error.message)) {\n          throw error;\n        }\n      } finally {\n        this._removeListeners();\n        await this._setRequestedChainsIds([]);\n        cleanup();\n      }\n    };\n    disconnectProvider();\n  }\n  async getAccount() {\n    const {\n      accounts\n    } = await this.getProvider();\n    if (!accounts[0]) {\n      throw new Error(\"No accounts found on provider.\");\n    }\n    return utils.getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const {\n      chainId\n    } = await this.getProvider();\n    return chainId;\n  }\n  async getProvider() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this._provider) {\n      await this._createProvider();\n    }\n    if (chainId) {\n      await this.switchChain(chainId);\n    }\n    if (!this._provider) {\n      throw new Error(\"No provider found.\");\n    }\n    return this._provider;\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider({\n      chainId\n    }), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const [account, provider] = await Promise.all([this.getAccount(), this.getProvider()]);\n      const isChainsStale = await this._isChainsStale();\n\n      // If an account does not exist on the session, then the connector is unauthorized.\n      if (!account) {\n        return false;\n      }\n\n      // If the chains are stale on the session, then the connector is unauthorized.\n      if (isChainsStale && provider.session) {\n        try {\n          await provider.disconnect();\n        } catch {} // eslint-disable-line no-empty\n        return false;\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const chain = this.chains.find(chain_ => chain_.chainId === chainId);\n    if (!chain) {\n      throw new SwitchChainError(`Chain with ID: ${chainId}, not found on connector.`);\n    }\n    try {\n      const provider = await this.getProvider();\n      const namespaceChains = this._getNamespaceChainsIds();\n      const namespaceMethods = this._getNamespaceMethods();\n      const isChainApproved = namespaceChains.includes(chainId);\n      if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n        const firstExplorer = chain.explorers && chain.explorers[0];\n        const blockExplorerUrls = firstExplorer ? {\n          blockExplorerUrls: [firstExplorer.url]\n        } : {};\n        await provider.request({\n          method: ADD_ETH_CHAIN_METHOD,\n          params: [{\n            chainId: utils.hexValue(chain.chainId),\n            chainName: chain.name,\n            nativeCurrency: chain.nativeCurrency,\n            rpcUrls: getValidPublicRPCUrl(chain),\n            // no clientId on purpose\n            ...blockExplorerUrls\n          }]\n        });\n        const requestedChains = await this._getRequestedChainsIds();\n        requestedChains.push(chainId);\n        await this._setRequestedChainsIds(requestedChains);\n      }\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: utils.hexValue(chainId)\n        }]\n      });\n      return chain;\n    } catch (error) {\n      const message = typeof error === \"string\" ? error : error?.message;\n      if (/user rejected request/i.test(message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async _createProvider() {\n    if (!this._initProviderPromise && \"object\" !== \"undefined\") {\n      this._initProviderPromise = this.initProvider();\n    }\n    return this._initProviderPromise;\n  }\n  async initProvider() {\n    const {\n      default: EthereumProvider,\n      OPTIONAL_EVENTS,\n      OPTIONAL_METHODS\n    } = await import('@walletconnect/ethereum-provider');\n    const [defaultChain, ...optionalChains] = this.filteredChains.map(_ref2 => {\n      let {\n        chainId\n      } = _ref2;\n      return chainId;\n    });\n    if (defaultChain) {\n      // EthereumProvider populates & deduplicates required methods and events internally\n      this._provider = await EthereumProvider.init({\n        showQrModal: this.showWalletConnectModal,\n        projectId: this.options.projectId,\n        optionalMethods: OPTIONAL_METHODS,\n        optionalEvents: OPTIONAL_EVENTS,\n        chains: [defaultChain],\n        optionalChains: optionalChains,\n        metadata: {\n          name: this.options.dappMetadata.name,\n          description: this.options.dappMetadata.description || \"\",\n          url: this.options.dappMetadata.url,\n          icons: [this.options.dappMetadata.logoUrl || \"\"]\n        },\n        rpcMap: Object.fromEntries(this.filteredChains.map(chain => [chain.chainId, chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n        ])),\n        qrModalOptions: this.options.qrModalOptions\n      });\n    }\n  }\n\n  /**\n   * Checks if the target chains match the chains that were\n   * initially requested by the connector for the WalletConnect session.\n   * If there is a mismatch, this means that the chains on the connector\n   * are considered stale, and need to be revalidated at a later point (via\n   * connection).\n   *\n   * There may be a scenario where a dapp adds a chain to the\n   * connector later on, however, this chain will not have been approved or rejected\n   * by the wallet. In this case, the chain is considered stale.\n   *\n   * There are exceptions however:\n   * -  If the wallet supports dynamic chain addition via `eth_addEthereumChain`,\n   *    then the chain is not considered stale.\n   * -  If the `isNewChainsStale` flag is falsy on the connector, then the chain is\n   *    not considered stale.\n   *\n   * For the above cases, chain validation occurs dynamically when the user\n   * attempts to switch chain.\n   *\n   * Also check that dapp supports at least 1 chain from previously approved session.\n   */\n  async _isChainsStale() {\n    const namespaceMethods = this._getNamespaceMethods();\n    if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n      return false;\n    }\n    if (!this.options.isNewChainsStale) {\n      return false;\n    }\n    const requestedChains = await this._getRequestedChainsIds();\n    const connectorChains = this.filteredChains.map(_ref3 => {\n      let {\n        chainId\n      } = _ref3;\n      return chainId;\n    });\n    const namespaceChains = this._getNamespaceChainsIds();\n    if (namespaceChains.length && !namespaceChains.some(id => connectorChains.includes(id))) {\n      return false;\n    }\n    return !connectorChains.every(id => requestedChains.includes(id));\n  }\n  async setupListeners() {\n    if (!this._provider) {\n      return;\n    }\n    this._removeListeners();\n    this._provider.on(\"accountsChanged\", this.onAccountsChanged);\n    this._provider.on(\"chainChanged\", this.onChainChanged);\n    this._provider.on(\"disconnect\", this.onDisconnect);\n    this._provider.on(\"session_delete\", this.onDisconnect);\n    this._provider.on(\"display_uri\", this.onDisplayUri);\n    this._provider.on(\"connect\", this.onConnect);\n  }\n  _removeListeners() {\n    if (!this._provider) {\n      return;\n    }\n    this._provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    this._provider.removeListener(\"chainChanged\", this.onChainChanged);\n    this._provider.removeListener(\"disconnect\", this.onDisconnect);\n    this._provider.removeListener(\"session_delete\", this.onDisconnect);\n    this._provider.removeListener(\"display_uri\", this.onDisplayUri);\n    this._provider.removeListener(\"connect\", this.onConnect);\n  }\n  async _setRequestedChainsIds(chains) {\n    await this._storage.setItem(REQUESTED_CHAINS_KEY, JSON.stringify(chains));\n  }\n  async _getRequestedChainsIds() {\n    const data = await this._storage.getItem(REQUESTED_CHAINS_KEY);\n    return data ? JSON.parse(data) : [];\n  }\n  _getNamespaceChainsIds() {\n    if (!this._provider) {\n      return [];\n    }\n    const chainIds = this._provider.session?.namespaces[NAMESPACE]?.chains?.map(chain => parseInt(chain.split(\":\")[1] || \"\"));\n    return chainIds ?? [];\n  }\n  _getNamespaceMethods() {\n    if (!this._provider) {\n      return [];\n    }\n    const methods = this._provider.session?.namespaces[NAMESPACE]?.methods;\n    return methods ?? [];\n  }\n}\n\nexport { WalletConnectConnector };\n"],"names":["chainsToRequest","Set","NAMESPACE","REQUESTED_CHAINS_KEY","ADD_ETH_CHAIN_METHOD","LAST_USED_CHAIN_ID","WalletConnectConnector","_WagmiConnector","_inherits","_super","_createSuper","config","_this","_classCallCheck","call","_objectSpread","options","isNewChainsStale","_defineProperty","_assertThisInitialized","walletIds","walletConnect","accounts","length","emit","account","utils","_ref4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","chainId","id","unsupported","wrap","_context","prev","next","Number","isChainUnsupported","_storage","setItem","String","chain","stop","_x","apply","arguments","_callee2","_context2","_setRequestedChainsIds","removeItem","uri","type","data","provider","_provider","storage","_createProvider","filteredChains","chains","filter","c","has","showWalletConnectModal","qrcode","_createClass","key","value","_connect","_callee3","_ref6","chainIdP","pairingTopic","targetChainId","lastUsedChainIdStr","lastUsedChainId","_this$filteredChains$","optionalChains","_args3","_context3","undefined","this","getItem","sent","parseInt","Error","getProvider","setupListeners","session","disconnect","map","optionalChain","connect","_ref","enable","getChainId","abrupt","providers","t0","test","message","UserRejectedRequestError","_disconnect","_callee5","cleanup","disconnectProvider","_this2","_context5","localStorage","startsWith","_ref7","_callee4","_context4","_removeListeners","finish","_getAccount","_callee6","_yield$this$getProvid","_context6","_getChainId","_callee7","_yield$this$getProvid2","_context7","_getProvider","_callee8","_args8","_context8","switchChain","_getSigner","_callee9","_yield$Promise$all","_yield$Promise$all2","_args9","_context9","Promise","all","getAccount","_slicedToArray","getSigner","_isAuthorized","_callee10","_yield$Promise$all3","_yield$Promise$all4","isChainsStale","_context10","_isChainsStale","t1","_switchChain","_callee11","namespaceChains","namespaceMethods","firstExplorer","blockExplorerUrls","requestedChains","_context11","find","chain_","SwitchChainError","concat","_getNamespaceChainsIds","_getNamespaceMethods","includes","explorers","url","request","method","params","chainName","name","nativeCurrency","rpcUrls","getValidPublicRPCUrl","_getRequestedChainsIds","push","_x2","_createProvider2","_callee12","_context12","_initProviderPromise","initProvider","_initProvider","_callee13","_yield$import","EthereumProvider","OPTIONAL_EVENTS","OPTIONAL_METHODS","_this$filteredChains$2","_this$filteredChains$3","defaultChain","_context13","default","_ref2","_toArray","slice","init","showQrModal","projectId","optionalMethods","optionalEvents","metadata","dappMetadata","description","icons","logoUrl","rpcMap","Object","fromEntries","rpc","qrModalOptions","_isChainsStale2","_callee14","connectorChains","_context14","_ref3","some","every","_setupListeners","_callee15","_context15","on","onAccountsChanged","onChainChanged","onDisconnect","onDisplayUri","onConnect","removeListener","_setRequestedChainsIds2","_callee16","_context16","JSON","stringify","_x3","_getRequestedChainsIds2","_callee17","_context17","parse","_this$_provider$sessi","chainIds","namespaces","split","_this$_provider$sessi2","methods","WagmiConnector"],"sourceRoot":""}